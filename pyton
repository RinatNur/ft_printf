#include <stdio.h>
#include <stdarg.h>

struct        s_format
{
    int minus;
    int plus;
    int space;
    int zero;
    int width;
    int prec;
    char lenght;
    char type;
}                    t;

int        ft_isdigit(int c)
{
    return (('0' <= c) && (c <= '9'));
}

int        ft_atoi(const char *str)
{
    int        i;
    int        sign;
    int        res;

    i = 0;
    sign = 1;
    res = 0;
    while (str[i])
    {
        while ((str[i] == 32) || (str[i] > 8 && str[i] < 14))
            i++;
        if ((str[i] == '-' || str[i] == '+') && ft_isdigit(str[i + 1]))
        {
            if (str[i] == '-')
                sign = -1;
            i++;
        }
        while (ft_isdigit(str[i]))
        {
            res = res * 10 + str[i] - '0';
            i++;
        }
        return (res == 0 ? 0 : (res * sign));
    }
    return (0);
}

static void         ft_width_parser(const char *format)
{
  int   width;

  width = ft_atoi(format);
  printf("width = %i\n", width);
}

static void        flags_parser(const char *format)
{
    t.minus = 0;
    t.plus = 0;
    t.zero = 0;
    t.space = 0;
    while (*format == '-' || *format == '0' || *format == ' ' || *format == '+')
    {
        if (*format == '-')
            t.minus = 1;
        if (*format == '+')
            t.plus = 1;
        if (*format == '0')
            t.zero = 1;
        if (*format == ' ')
            t.space = 1;
        *format++;
    }
    ft_width_parser(format);
}

int        ft_printf(const char *format, ...)
{
	int 		num_pr_sym;
	int 		index;
	int 		*i;
	int 		*count;
	va_list     ap;

	num_pr_sym = 0;
	index = 0;
	i = &index;
	count = &num_pr_sym;
	va_start(ap, format);
//    printf("format = %p", *format);
	while(format[*i])
	{
		if (format[*i] != '%' )
		{
			write (1, format[*i], 1);
			i++;
			count += 1;
		}
		else if (format[*i] == '%')
		{

//			flags_parser(format, ap, &i);
			// width_parser()
//            width_parser()
		}
		if(format[*i])
			i++;
	}
	va_end(ap);
	return (num_pr_sym);
}

int        main()
{
    char        *str = "str %-012c";
    char         *s = "new";
    char         c = 'Z';
    int         i = 3456;

    ft_printf(str, c);
    return (0);
}